name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22.15'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  lint-and-security:
    name: Lint & Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Unit Tests
  # unit-tests:
  #   name: Unit Tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci --legacy-peer-deps

  #     - name: Run unit tests
  #       run: npm run test:coverage

  #     - name: Upload coverage reports
  #       uses: codecov/codecov-action@v3
  #       with:
  #         file: ./coverage/got/lcov.info
  #         flags: unittests
  #         name: codecov-umbrella

  #     - name: Archive test results
  #       uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: unit-test-results
  #         path: |
  #           coverage/
  #           karma-results.xml

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build Angular application
        run: npm run build:prod

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  # End-to-End Tests
  # e2e-tests:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: [build]

  #   services:
  #     backend:
  #       image: node:18-alpine
  #       ports:
  #         - 3000:3000
  #       env:
  #         NODE_ENV: test
  #         PORT: 3000
  #         JWT_SECRET: test-secret-key

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci --legacy-peer-deps

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: dist-files
  #         path: dist/

  #     - name: Start backend server
  #       run: |
  #         node backend/server.js &
  #         sleep 10
  #         curl -f http://localhost:3000/health || exit 1

  #     - name: Start Angular dev server
  #       run: |
  #         npm start &
  #         sleep 30
  #         curl -f http://localhost:4200/ || exit 1

  #     - name: Run Cypress E2E tests
  #       uses: cypress-io/github-action@v6
  #       with:
  #         install: false
  #         wait-on: 'http://localhost:4200, http://localhost:3000/health'
  #         wait-on-timeout: 120
  #         browser: chrome
  #         record: true
  #         parallel: true
  #       env:
  #         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Archive E2E test results
  #       uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: cypress-results
  #         path: |
  #           cypress/videos/
  #           cypress/screenshots/

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-docker-results.sarif'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-docker-results.sarif'

  # Puppeteer Validation
  puppeteer-validation:
    name: Puppeteer Validation
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 60

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:4200/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'

      - name: Run Puppeteer validation tests
        run: node scripts/puppeteer-validation.js

      - name: Archive Puppeteer results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: puppeteer-results
          path: |
            puppeteer-screenshots/
            puppeteer-report.json

      - name: Stop services
        run: docker-compose down

  # Deploy to Development
  # deploy-dev:
  #   name: Deploy to Development
  #   runs-on: ubuntu-latest
  #   needs: [puppeteer-validation]
  #   if: github.ref == 'refs/heads/develop'
  #   environment: development

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to development environment
  #       run: |
  #         echo "Deploying to development environment..."
  #         # Add your deployment script here

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [puppeteer-validation]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ steps.meta.outputs.tags }}"
          # Add your production deployment script here

  # Performance Testing
  # performance-test:
  #   name: Performance Testing
  #   runs-on: ubuntu-latest
  #   needs: [deploy-dev]
  #   if: github.ref == 'refs/heads/develop'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v10
  #       with:
  #         urls: |
  #           http://localhost:4200
  #           http://localhost:4200/characters
  #           http://localhost:4200/favorites
  #         configPath: './.lighthouserc.json'
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true

  # Generate Release Notes
  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Release Notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
